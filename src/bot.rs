use crate::Application;
use anyhow::Result;
use regex::Regex;
use std::sync::Arc;
use teloxide::types::{InputFile, MessageKind, User};
use teloxide::{prelude::*, utils::command::BotCommands};

pub struct MessageHandler {
    pub app: Arc<Application>,
    pub msg: Message,
}

impl MessageHandler {
    pub async fn handle(msg: Message, app: Arc<Application>) -> Result<()> {
        let handler = Self { app, msg };

        if let MessageKind::Common(_) = handler.msg.kind {
            if handler.msg.chat.is_private() {
                handler.private().await?;
            }
        }

        Ok(())
    }

    async fn private(&self) -> Result<()> {
        if let Some(url) = self.msg.text() {
            let re = Regex::new(r"^https?://(?:www\.)?coub\.com/view/(?<id>\w{3,10})/?$").unwrap();

            let Some(caps) = re.captures(url) else {
                self.app
                    .bot
                    .send_message(self.msg.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Coub!")
                    .await?;
                return Ok(());
            };

            let api_url = format!("https://coub.com/api/v2/coubs/{}", &caps["id"]);

            match self.app.coub_client.get_file_url(api_url).await {
                Some(url) => {
                    self.app
                        .bot
                        .send_video(ChatId(self.app.receiver), InputFile::url(url.parse()?))
                        .caption(format!(
                            "üí• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –ø—Ä–∏—Å–ª–∞–ª –Ω–æ–≤—ã–π –∫—É–±!",
                            get_user_text(self.msg.from.as_ref().unwrap())
                        ))
                        .await?;

                    self.app
                        .bot
                        .send_message(
                            self.msg.chat.id,
                            "üí• –û, —Å–ø–∞—Å–∏–±–æ. –û—Ç–ø—Ä–∞–≤–∏–ª –∫—É–± –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω—É",
                        )
                        .await?;
                }
                None => {
                    self.app
                        .bot
                        .send_message(self.msg.chat.id, "‚ùå –û–ø–ø–∞, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞")
                        .await?;
                }
            }
        }

        Ok(())
    }
}

#[derive(BotCommands, Clone)]
#[command(
    rename_rule = "lowercase",
    description = "–ö–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–æ—Ç:"
)]
pub enum BotCommand {
    #[command(description = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")]
    Help,
    #[command(description = "–°—Ç–∞—Ä—Ç")]
    Start,
}

pub struct CommandHandler {
    pub app: Arc<Application>,
    pub msg: Message,
}

impl CommandHandler {
    pub async fn handle(msg: Message, cmd: BotCommand, app: Arc<Application>) -> Result<()> {
        let handler = Self { app, msg };

        if !handler.msg.chat.is_private() {
            return Ok(());
        }

        match cmd {
            BotCommand::Help => {
                handler.help().await?;
            }
            BotCommand::Start => {
                handler.start().await?;
            }
        };

        Ok(())
    }

    async fn help(&self) -> Result<()> {
        self.app
            .bot
            .send_message(
                self.msg.chat.id,
                format!("–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {}", self.app.version),
            )
            .await?;

        Ok(())
    }

    async fn start(&self) -> Result<()> {
        self.app.bot
            .send_message(self.msg.chat.id, "ü§ü –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∂–∏—â–µ!\n\n–†–∞–¥, —á—Ç–æ —Ç—ã –∑–∞–≥–ª—è–Ω—É–ª!\n\n–ü—Ä–∏—Å—ã–ª–∞–π —Å—Å—ã–ª–∫—É –≤–∏–¥–∞:\nhttps://coub.com/view/#coub_id#\n\n–ò —è –≤—Å–µ —Å–¥–µ–ª–∞—é –≤ –ª—É—á—à–µ–º –≤–∏–¥–µ! üëå")
            .await?;

        Ok(())
    }
}

pub fn get_user_text(user: &User) -> String {
    match &user.username {
        Some(uname) => format!("@{uname}"),
        None => format!("<a href=\"{}\">{}</a>", user.url(), user.first_name),
    }
}
